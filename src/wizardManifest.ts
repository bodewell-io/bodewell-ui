// This file is auto-generated by scripts/generate-manifest.js
// Do not modify this file directly.

// Import the types from your dedicated types file
import type { WizardManifest } from './types/wizard';

export const wizardManifest: WizardManifest = {
  "components": [
    {
      "name": "Alert",
      "description": "Displays static, in-page messages to convey important information like success, warnings, or errors.",
      "tags": [
        "feedback",
        "message",
        "notification",
        "ui"
      ],
      "category": "feedback",
      "filePath": "src/feedback/Alert.tsx",
      "props": []
    },
    {
      "name": "Checkbox",
      "description": "A standard checkbox input for selecting one or more options from a set.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Checkbox.tsx",
      "props": []
    },
    {
      "name": "ComboBox",
      "description": "A text input with an integrated dropdown list of selectable options, allowing both typing and selection.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "autocomplete",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/ComboBox.tsx",
      "props": []
    },
    {
      "name": "MultiSelect",
      "description": "An enhanced dropdown component that allows users to select multiple options from a searchable list.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "ui",
        "multi-selection"
      ],
      "category": "form",
      "filePath": "src/form/MultiSelect.tsx",
      "props": []
    },
    {
      "name": "Radio",
      "description": "A single radio button input, typically used within a group where only one option can be selected.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Radio.tsx",
      "props": []
    },
    {
      "name": "Select",
      "description": "A standard HTML select dropdown component for choosing a single option from a list.",
      "tags": [
        "form",
        "input",
        "dropdown",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Select.tsx",
      "props": []
    },
    {
      "name": "AccordionItem",
      "description": "A single, collapsible section within an `Accordion` component, consisting of a header and a hidden content body.",
      "tags": [
        "layout",
        "ui",
        "collapsible",
        "expandable"
      ],
      "category": "layout",
      "filePath": "src/layout/Accordion.tsx",
      "props": []
    },
    {
      "name": "Drawer",
      "description": "A sliding panel that typically appears from the edge of the screen, used for additional content or forms.",
      "tags": [
        "layout",
        "modal",
        "slide-in",
        "ui"
      ],
      "category": "layout",
      "filePath": "src/layout/Drawer.tsx",
      "props": []
    },
    {
      "name": "ListItem",
      "description": "Represents a single item within a `List` component.",
      "tags": [
        "ui",
        "layout",
        "typography"
      ],
      "category": "layout",
      "filePath": "src/layout/List.tsx",
      "props": []
    },
    {
      "name": "Modal",
      "description": "A dialog box that appears on top of the current page, requiring user interaction to dismiss.",
      "tags": [
        "ui",
        "overlay",
        "dialog",
        "popup"
      ],
      "category": "layout",
      "filePath": "src/layout/Modal.tsx",
      "props": []
    },
    {
      "name": "BreadcrumbItem",
      "description": "Represents a single step or link within a `Breadcrumbs` navigation path.",
      "tags": [
        "navigation",
        "ui",
        "link"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Breadcrumbs.tsx",
      "props": []
    },
    {
      "name": "MenuDivider",
      "description": "A visual separator for grouping MenuItems within a Menu.",
      "tags": [
        "menu",
        "navigation",
        "ui"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Menu.tsx",
      "props": []
    },
    {
      "name": "TabPanel",
      "description": "Represents a single tab and its associated content panel within a `Tabs` component.",
      "tags": [
        "navigation",
        "ui",
        "content"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Tabs.tsx",
      "props": []
    },
    {
      "name": "ActivityFeed",
      "description": "Displays a chronological list of recent activities or changes, typically with a timeline indicator.",
      "tags": [
        "templates",
        "patterns",
        "feed",
        "timeline",
        "data-display"
      ],
      "category": "templates-patterns",
      "filePath": "src/templates-patterns/ActivityFeed.tsx",
      "props": []
    },
    {
      "name": "Badge",
      "description": "A small component used for status indicators, labels, or counts.",
      "tags": [
        "ui",
        "status",
        "label",
        "indicator"
      ],
      "category": "ui",
      "filePath": "src/ui/Badge.tsx",
      "props": []
    },
    {
      "name": "Icon",
      "description": "A dynamic component that renders scalable vector icons from the Lucide library.",
      "tags": [
        "ui",
        "graphics",
        "svg",
        "symbol"
      ],
      "category": "ui",
      "filePath": "src/ui/Icon.tsx",
      "props": []
    }
  ],
  "layouts": [],
  "utils": [
    {
      "name": "ThemeProvider",
      "description": "Provides the global theme context to the application, enabling dynamic theme switching and persistence.",
      "tags": [
        "context",
        "theme",
        "provider",
        "global",
        "utility"
      ],
      "category": "utility",
      "filePath": "src/contexts/ThemeContext.tsx",
      "props": []
    }
  ],
  "hooks": [],
  "data": [
    {
      "name": "Mock Data Sets",
      "description": "Pre-defined datasets for prototyping tables, charts, and other data-driven components.",
      "tags": [
        "data",
        "mock",
        "example"
      ],
      "category": "data",
      "availableData": [
        "mockTableData",
        "mockChartData",
        "mockPieChartData",
        "mockLargeTableData"
      ],
      "filePath": "data/mockData.ts"
    }
  ]
} as const;