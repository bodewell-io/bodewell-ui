// This file is auto-generated by scripts/generate-manifest.js
// Do not modify this file directly.

// Import the types from your dedicated types file
import type { WizardManifest } from './src/types/wizard';

export const wizardManifest: WizardManifest = {
  "components": [
    {
      "name": "BarChart",
      "description": "A theme-aware bar chart component powered by Recharts, for comparing categorical data.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "filePath": "src/charts/BarChart.tsx",
      "props": []
    },
    {
      "name": "ChartWithTable",
      "description": "A wrapper component that combines a chart with an option to view its underlying data in a table within a drawer.",
      "tags": [
        "templates",
        "charts",
        "data-display",
        "pattern",
        "dashboard"
      ],
      "category": "templates-patterns",
      "filePath": "src/charts/ChartWithTable.tsx",
      "props": []
    },
    {
      "name": "LineChart",
      "description": "A theme-aware line chart component powered by Recharts, for visualizing trends over time or categories.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "filePath": "src/charts/LineChart.tsx",
      "props": []
    },
    {
      "name": "PieChart",
      "description": "A theme-aware pie chart component powered by Recharts, for showing proportional relationships of parts to a whole.",
      "tags": [
        "charts",
        "data-visualization",
        "rechart"
      ],
      "category": "charts",
      "filePath": "src/charts/PieChart.tsx",
      "props": []
    },
    {
      "name": "DataTable",
      "description": "A powerful data grid component that wraps AG Grid, providing advanced features like sorting, filtering, and resizing, fully themed to match the application.",
      "tags": [
        "data-display",
        "grid",
        "table",
        "ag-grid",
        "advanced"
      ],
      "category": "data-display",
      "filePath": "src/data-display/DataTable.tsx",
      "props": []
    },
    {
      "name": "Table",
      "description": "A simple, theme-aware HTML table component for displaying tabular data, with support for custom cell rendering and empty states.",
      "tags": [
        "data-display",
        "table",
        "ui"
      ],
      "category": "data-display",
      "filePath": "src/data-display/Table.tsx",
      "props": []
    },
    {
      "name": "Alert",
      "description": "Displays static, in-page messages to convey important information like success, warnings, or errors.",
      "tags": [
        "feedback",
        "message",
        "notification",
        "ui"
      ],
      "category": "feedback",
      "filePath": "src/feedback/Alert.tsx",
      "props": []
    },
    {
      "name": "Toast",
      "description": "A single, transient notification message that appears briefly to provide feedback.",
      "tags": [
        "feedback",
        "notification",
        "message",
        "ui"
      ],
      "category": "feedback",
      "filePath": "src/feedback/Toast.tsx",
      "props": []
    },
    {
      "name": "useToast",
      "description": "A React hook to easily add and dismiss toast notifications anywhere within a `ToastProvider`. - name: addToast type: (message: string, type?: ToastType, duration?: number) => void description: A function to trigger a new toast notification. - name: dismissToast type: (id: string) => void description: A function to programmatically dismiss a toast by its ID.",
      "tags": [
        "hook",
        "feedback",
        "notification"
      ],
      "category": "feedback",
      "filePath": "src/feedback/ToastProvider.tsx",
      "props": [],
      "returns": []
    },
    {
      "name": "Checkbox",
      "description": "A standard checkbox input for selecting one or more options from a set.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Checkbox.tsx",
      "props": []
    },
    {
      "name": "ComboBox",
      "description": "A text input with an integrated dropdown list of selectable options, allowing both typing and selection.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "autocomplete",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/ComboBox.tsx",
      "props": []
    },
    {
      "name": "DatePicker",
      "description": "A calendar-based input component for selecting single dates, with theme integration.",
      "tags": [
        "form",
        "input",
        "date",
        "calendar",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/DatePicker.tsx",
      "props": []
    },
    {
      "name": "FileUpload",
      "description": "A component allowing users to upload files via drag-and-drop or a file browser, with support for multiple files and accepted types.",
      "tags": [
        "form",
        "input",
        "upload",
        "files",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/FileUpload.tsx",
      "props": []
    },
    {
      "name": "FormTemplate",
      "description": "A flexible component for rapidly building forms based on a declarative array of field configurations.",
      "tags": [
        "templates",
        "form",
        "structure",
        "pattern"
      ],
      "category": "templates-patterns",
      "filePath": "src/form/FormTemplate.tsx",
      "props": []
    },
    {
      "name": "Input",
      "description": "A theme-aware text input component with support for labels, helper text, and validation states.",
      "tags": [
        "form",
        "input",
        "ui",
        "text"
      ],
      "category": "form",
      "filePath": "src/form/Input.tsx",
      "props": []
    },
    {
      "name": "MultiSelect",
      "description": "An enhanced dropdown component that allows users to select multiple options from a searchable list.",
      "tags": [
        "form",
        "input",
        "select",
        "dropdown",
        "ui",
        "multi-selection"
      ],
      "category": "form",
      "filePath": "src/form/MultiSelect.tsx",
      "props": []
    },
    {
      "name": "Radio",
      "description": "A single radio button input, typically used within a group where only one option can be selected.",
      "tags": [
        "form",
        "input",
        "selection",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Radio.tsx",
      "props": []
    },
    {
      "name": "Select",
      "description": "A standard HTML select dropdown component for choosing a single option from a list.",
      "tags": [
        "form",
        "input",
        "dropdown",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Select.tsx",
      "props": []
    },
    {
      "name": "Textarea",
      "description": "A theme-aware textarea component for multi-line text input.",
      "tags": [
        "form",
        "input",
        "ui"
      ],
      "category": "form",
      "filePath": "src/form/Textarea.tsx",
      "props": []
    },
    {
      "name": "ToggleSwitch",
      "description": "A theme-aware toggle switch component, offering a boolean input alternative to a checkbox.",
      "tags": [
        "form",
        "ui",
        "toggle",
        "switch",
        "input"
      ],
      "category": "form",
      "filePath": "src/form/ToggleSwitch.tsx",
      "props": []
    },
    {
      "name": "AccordionItem",
      "description": "A single, collapsible section within an `Accordion` component, consisting of a header and a hidden content body.",
      "tags": [
        "layout",
        "ui",
        "collapsible",
        "expandable"
      ],
      "category": "layout",
      "filePath": "src/layout/Accordion.tsx",
      "props": []
    },
    {
      "name": "Drawer",
      "description": "A sliding panel that typically appears from the edge of the screen, used for additional content or forms.",
      "tags": [
        "layout",
        "modal",
        "slide-in",
        "ui"
      ],
      "category": "layout",
      "filePath": "src/layout/Drawer.tsx",
      "props": []
    },
    {
      "name": "ListItem",
      "description": "Represents a single item within a `List` component.",
      "tags": [
        "ui",
        "layout",
        "typography"
      ],
      "category": "layout",
      "filePath": "src/layout/List.tsx",
      "props": []
    },
    {
      "name": "Modal",
      "description": "A dialog box that appears on top of the current page, requiring user interaction to dismiss.",
      "tags": [
        "ui",
        "overlay",
        "dialog",
        "popup"
      ],
      "category": "layout",
      "filePath": "src/layout/Modal.tsx",
      "props": []
    },
    {
      "name": "BreadcrumbItem",
      "description": "Represents a single step or link within a `Breadcrumbs` navigation path.",
      "tags": [
        "navigation",
        "ui",
        "link"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Breadcrumbs.tsx",
      "props": []
    },
    {
      "name": "MenuDivider",
      "description": "A visual separator for grouping MenuItems within a Menu.",
      "tags": [
        "menu",
        "navigation",
        "ui"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Menu.tsx",
      "props": []
    },
    {
      "name": "SideNav",
      "description": "A sticky side navigation component, ideal for documentation sites or complex applications, with support for nested links and scroll-spy.",
      "tags": [
        "navigation",
        "layout",
        "ui",
        "menu"
      ],
      "category": "navigation",
      "filePath": "src/navigation/SideNav.tsx",
      "props": []
    },
    {
      "name": "TabPanel",
      "description": "Represents a single tab and its associated content panel within a `Tabs` component.",
      "tags": [
        "navigation",
        "ui",
        "content"
      ],
      "category": "navigation",
      "filePath": "src/navigation/Tabs.tsx",
      "props": []
    },
    {
      "name": "ActionBar",
      "description": "A persistent bar, typically at the bottom of a form or page, used to group primary actions like 'Save' and 'Cancel'.",
      "tags": [
        "layout",
        "form",
        "actions",
        "buttons",
        "ui",
        "pattern"
      ],
      "category": "layout",
      "filePath": "src/templates-patterns/ActionBar.tsx",
      "props": []
    },
    {
      "name": "ActivityFeed",
      "description": "Displays a chronological list of recent activities or changes, typically with a timeline indicator.",
      "tags": [
        "templates",
        "patterns",
        "feed",
        "timeline",
        "data-display"
      ],
      "category": "templates-patterns",
      "filePath": "src/templates-patterns/ActivityFeed.tsx",
      "props": []
    },
    {
      "name": "PageHeader",
      "description": "Displays the main header section of a page, including a title, optional description, and a slot for action buttons.",
      "tags": [
        "layout",
        "typography",
        "header",
        "ui",
        "template"
      ],
      "category": "templates-patterns",
      "filePath": "src/templates-patterns/PageHeader.tsx",
      "props": []
    },
    {
      "name": "SectionHeader",
      "description": "A simple, consistent header for organizing sections of content within a page.",
      "tags": [
        "layout",
        "typography",
        "header",
        "ui"
      ],
      "category": "templates-patterns",
      "filePath": "src/templates-patterns/SectionHeader.tsx",
      "props": []
    },
    {
      "name": "Badge",
      "description": "A small component used for status indicators, labels, or counts.",
      "tags": [
        "ui",
        "status",
        "label",
        "indicator"
      ],
      "category": "ui",
      "filePath": "src/ui/Badge.tsx",
      "props": []
    },
    {
      "name": "Button",
      "description": "A versatile component for user interactions, supporting various styles, sizes, and states. It renders as a button or an anchor tag if an href is provided.",
      "tags": [
        "ui",
        "action",
        "form",
        "clickable"
      ],
      "category": "ui",
      "filePath": "src/ui/Button.tsx",
      "props": []
    },
    {
      "name": "ChatFAB",
      "description": "A floating action button (FAB) specifically for opening a chat interface, with a tooltip and icon.",
      "tags": [
        "ui",
        "button",
        "chat",
        "fab",
        "ai"
      ],
      "category": "ui",
      "filePath": "src/ui/ChatFAB.tsx",
      "props": []
    },
    {
      "name": "Icon",
      "description": "A dynamic component that renders scalable vector icons from the Lucide library.",
      "tags": [
        "ui",
        "graphics",
        "svg",
        "symbol"
      ],
      "category": "ui",
      "filePath": "src/ui/Icon.tsx",
      "props": []
    }
  ],
  "layouts": [],
  "utils": [
    {
      "name": "ThemeProvider",
      "description": "Provides the global theme context to the application, enabling dynamic theme switching and persistence.",
      "tags": [
        "context",
        "theme",
        "provider",
        "global",
        "utility"
      ],
      "category": "utility",
      "filePath": "src/contexts/ThemeContext.tsx",
      "props": []
    }
  ],
  "hooks": [],
  "data": [
    {
      "name": "Mock Data Sets",
      "description": "Pre-defined datasets for prototyping tables, charts, and other data-driven components.",
      "tags": [
        "data",
        "mock",
        "example"
      ],
      "category": "data",
      "availableData": [
        "mockTableData",
        "mockChartData",
        "mockPieChartData",
        "mockLargeTableData"
      ],
      "filePath": "data/mockData.ts"
    }
  ]
} as const;